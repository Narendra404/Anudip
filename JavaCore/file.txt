OOPs - Object Oriented Programming is a methodology or paradigm that follows the principle of designing a program using objects and classes.
	It deals with data and instructions in a program by creating entities called objects that represent their real life counterparts in a program.
	The methodology focuses on creating an object which can have certain properties and behaviour, like a real world object; 
	and use it to solve complex real life problems.

	It is different from Procedural Oriented Programming - which deals with information flow linearly via functions or procedures.
	It has no concept of data hiding and encapsulation. This makes this paradigm hazardous.

	OOP solves the problems of Procedural Oriented Programming   

	It does so by implementing the following features :-

Class & Objects - 
	
	An object as described above, is a digital representation of real world objects. 
	It has properties and behaviours which can be called data members and member methods of the class the object belongs to.
	The properites of an object describe the type or types of data the object deals with.
	The behaviours of an object describe the way in which the object interacts with said data.

	Member functions or behaviours of an object create, modify and delete the data stored in data members or properites

	A class is a blueprint for an object. 
	It wraps data members and member functions into a single unit.
	A class is used to create simmilar objects with the same framework but working with different values of data.
	
	A class creates instances with same structure which are called objects. 
	Objects of same class deal with same type of data and have same behaviours.

	Ex - a football can be considered as a real life object which can be considered to a type of ball.
		Simmilarly in OOP a football can be considered an object which belongs to a class called ball.
		football shares simmilarities with objects in the same class for example a basketball.
		Both football and basketball are - round, elastic, air-filled : these can be considered the objects's properities or data members
		Both football and basketball can - be used to play, be bounced, be punctured : these can be considered the object's behaviours or member functions.

		Using the behaviours of an object football to interact with its properites can enable one to solve complex problems involving a football.

Inheritance -
	Inheritance is one of the OOPs concepts that allows the classes to share certain properties and behaviours.
	It allows for users to reuse code and add to it create new functionality.

	For Ex :- A class cars can inherit much from a general class like a class vehicle. Class car can inherit the behaviour of moving from its parent class. It can also add to the class of vehicle by adding the property of number of pistons in the engine since a vehicle may or may not be motorised it would not have that property. Other children classes to the vehicle class could be truck, motorbike, bus, bicycle classes.

	Class that inherit from other classes are called thier child class and those that get inherited are called a parent class to those that inherit them.
The number of parents and child in inheritance concept can vary and hence they give rise to types of inheritance which are :-

	Single inheritance - 
		single parent - single child

	Multilevel inheritance -
		single parent to a single child which can be a parent to another child class and so on

	Heirarchiel inheritance -
		Single parent - multiple children classes

	Multiple inheritance -
		Multiple parent - single child

	Hybrid inheritance -
		Mix of the above four types of inheritances

Polymorphism -
	
	Poly means 'many' and morph means 'forms'. As the name suggests it allows a part of code to have many forms. It allows user to create structures with same name but different functionalities. It enables to reduce the number of identifier names and make coding programs more efficient.

There are two types of Polymorphism :-

	Compile time polymorphism - Also called static polymorphism it is achived in two ways -
		
		Function overloading - functions with same name but differnt number of arguments or types of arguments

		For Ex - two functions named perimeter with one argument and two arguments .The one with one argument calculates the perimeter of a square with the help of the single argument. The one with two arguments calculates the perimeter of a rectangle.

		Operator overloading - operator symbols which operate on one type of data differently and with other type of data differently.
		For Ex - A '+' symbol may be used to add two integers but can be used to concatenate two strings.

	Run time polymorphism - Also known as dynamic method dispatch. It is a process in which a function call to an overridden method is resolved at runtime. Specifically it is called method overriding where a method inherited from a parent class is changed in the child class i.e. the body of the method changed, the function prototype remains same. Since after change in the overridden method it is essentially a method of the child and the original function from the parent class is still present in the child class. These two functions of same prototype in the same class leads to resolution choices during runtime and hence runtime polymorphism.

Encapsulation :-
	
	It is a fundamental concept of OOP that refers to the bundling of data and methods that operate on that data, within a single unit. It is way of hiding implementations from the outside access of the unit and only exposing a public interface that can be used to interact with the unit.

	Class is a perfect example of encapsulation. In class the data as data members and member functions which operate on the data are bound in a single unit. 

	It provides several benifits like data hiding - hiding implementation details from the users of a program.; flexibility in the form of assigning which data and methods are accessible to outside user and hence change a lot of functionality of the program. It also makes testing easier because of encapsulation into a single unit.

Abstraction :- 

	It is a way to show parts of a program to the user; -- parts that are essential for the working of the user with program are displayed but other parts like implementation details are hidden from the user. The irrelevant details are not presented and only the relevant parts are available for use.

	For Ex - While driving a car the user need not need to know how the brake stops the tyres from moving just that pushing the brake pedal causes the car to slow down. This protects the user from the unnecessary distraction from the act of braking, caused by the availability of irrelevant deatails of the mechanics of the brake.

Abstraction is achived by the use of abstract classes and interfaces. It only provides the method prototypes for the user to know how to use the method and not the method implementation as it is irrelavant details for the user. The implementation is done at the behest of the programmer wihtout any knowledge of the kind of implementation.


So these are the concepts that give rise to the framework of OOP. Thank you.